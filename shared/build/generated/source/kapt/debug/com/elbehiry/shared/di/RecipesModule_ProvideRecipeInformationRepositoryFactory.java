// Generated by Dagger (https://dagger.dev).
package com.elbehiry.shared.di;

import com.elbehiry.shared.data.db.datastore.RecipesLocalDataStore;
import com.elbehiry.shared.data.recipes.info.remote.RecipeInformationDataSource;
import com.elbehiry.shared.data.recipes.info.repository.RecipeInformationRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RecipesModule_ProvideRecipeInformationRepositoryFactory implements Factory<RecipeInformationRepository> {
  private final RecipesModule module;

  private final Provider<RecipeInformationDataSource> recipeInformationDataSourceProvider;

  private final Provider<RecipesLocalDataStore> recipesLocalDataStoreProvider;

  public RecipesModule_ProvideRecipeInformationRepositoryFactory(RecipesModule module,
      Provider<RecipeInformationDataSource> recipeInformationDataSourceProvider,
      Provider<RecipesLocalDataStore> recipesLocalDataStoreProvider) {
    this.module = module;
    this.recipeInformationDataSourceProvider = recipeInformationDataSourceProvider;
    this.recipesLocalDataStoreProvider = recipesLocalDataStoreProvider;
  }

  @Override
  public RecipeInformationRepository get() {
    return provideRecipeInformationRepository(module, recipeInformationDataSourceProvider.get(), recipesLocalDataStoreProvider.get());
  }

  public static RecipesModule_ProvideRecipeInformationRepositoryFactory create(RecipesModule module,
      Provider<RecipeInformationDataSource> recipeInformationDataSourceProvider,
      Provider<RecipesLocalDataStore> recipesLocalDataStoreProvider) {
    return new RecipesModule_ProvideRecipeInformationRepositoryFactory(module, recipeInformationDataSourceProvider, recipesLocalDataStoreProvider);
  }

  public static RecipeInformationRepository provideRecipeInformationRepository(
      RecipesModule instance, RecipeInformationDataSource recipeInformationDataSource,
      RecipesLocalDataStore recipesLocalDataStore) {
    return Preconditions.checkNotNullFromProvides(instance.provideRecipeInformationRepository(recipeInformationDataSource, recipesLocalDataStore));
  }
}
