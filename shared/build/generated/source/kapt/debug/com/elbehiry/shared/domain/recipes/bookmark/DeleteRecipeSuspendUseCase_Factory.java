// Generated by Dagger (https://dagger.dev).
package com.elbehiry.shared.domain.recipes.bookmark;

import com.elbehiry.shared.data.db.datastore.RecipesLocalDataStore;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DeleteRecipeSuspendUseCase_Factory implements Factory<DeleteRecipeSuspendUseCase> {
  private final Provider<RecipesLocalDataStore> dataStoreProvider;

  private final Provider<CoroutineDispatcher> ioDispatcherProvider;

  public DeleteRecipeSuspendUseCase_Factory(Provider<RecipesLocalDataStore> dataStoreProvider,
      Provider<CoroutineDispatcher> ioDispatcherProvider) {
    this.dataStoreProvider = dataStoreProvider;
    this.ioDispatcherProvider = ioDispatcherProvider;
  }

  @Override
  public DeleteRecipeSuspendUseCase get() {
    return newInstance(dataStoreProvider.get(), ioDispatcherProvider.get());
  }

  public static DeleteRecipeSuspendUseCase_Factory create(
      Provider<RecipesLocalDataStore> dataStoreProvider,
      Provider<CoroutineDispatcher> ioDispatcherProvider) {
    return new DeleteRecipeSuspendUseCase_Factory(dataStoreProvider, ioDispatcherProvider);
  }

  public static DeleteRecipeSuspendUseCase newInstance(RecipesLocalDataStore dataStore,
      CoroutineDispatcher ioDispatcher) {
    return new DeleteRecipeSuspendUseCase(dataStore, ioDispatcher);
  }
}
