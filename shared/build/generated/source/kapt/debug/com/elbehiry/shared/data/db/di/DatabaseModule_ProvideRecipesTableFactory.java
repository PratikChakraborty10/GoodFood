// Generated by Dagger (https://dagger.dev).
package com.elbehiry.shared.data.db.di;

import com.elbehiry.shared.data.db.DelishDataBase;
import com.elbehiry.shared.data.db.recipes.tables.RecipesTable;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DatabaseModule_ProvideRecipesTableFactory implements Factory<RecipesTable> {
  private final Provider<DelishDataBase> delishDataBaseProvider;

  public DatabaseModule_ProvideRecipesTableFactory(
      Provider<DelishDataBase> delishDataBaseProvider) {
    this.delishDataBaseProvider = delishDataBaseProvider;
  }

  @Override
  public RecipesTable get() {
    return provideRecipesTable(delishDataBaseProvider.get());
  }

  public static DatabaseModule_ProvideRecipesTableFactory create(
      Provider<DelishDataBase> delishDataBaseProvider) {
    return new DatabaseModule_ProvideRecipesTableFactory(delishDataBaseProvider);
  }

  public static RecipesTable provideRecipesTable(DelishDataBase delishDataBase) {
    return Preconditions.checkNotNullFromProvides(DatabaseModule.INSTANCE.provideRecipesTable(delishDataBase));
  }
}
