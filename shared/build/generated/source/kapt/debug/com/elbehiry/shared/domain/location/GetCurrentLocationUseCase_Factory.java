// Generated by Dagger (https://dagger.dev).
package com.elbehiry.shared.domain.location;

import com.elbehiry.shared.data.location.repository.ILocationRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class GetCurrentLocationUseCase_Factory implements Factory<GetCurrentLocationUseCase> {
  private final Provider<ILocationRepository> locationRepositoryProvider;

  private final Provider<CoroutineDispatcher> ioDispatcherProvider;

  public GetCurrentLocationUseCase_Factory(Provider<ILocationRepository> locationRepositoryProvider,
      Provider<CoroutineDispatcher> ioDispatcherProvider) {
    this.locationRepositoryProvider = locationRepositoryProvider;
    this.ioDispatcherProvider = ioDispatcherProvider;
  }

  @Override
  public GetCurrentLocationUseCase get() {
    return newInstance(locationRepositoryProvider.get(), ioDispatcherProvider.get());
  }

  public static GetCurrentLocationUseCase_Factory create(
      Provider<ILocationRepository> locationRepositoryProvider,
      Provider<CoroutineDispatcher> ioDispatcherProvider) {
    return new GetCurrentLocationUseCase_Factory(locationRepositoryProvider, ioDispatcherProvider);
  }

  public static GetCurrentLocationUseCase newInstance(ILocationRepository locationRepository,
      CoroutineDispatcher ioDispatcher) {
    return new GetCurrentLocationUseCase(locationRepository, ioDispatcher);
  }
}
