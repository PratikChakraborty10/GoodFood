// Generated by Dagger (https://dagger.dev).
package com.elbehiry.shared.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.Interceptor;
import okhttp3.OkHttpClient;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SharedModule_ProvideOkHttpFactory implements Factory<OkHttpClient> {
  private final SharedModule module;

  private final Provider<Interceptor> httpLoggingInterceptorProvider;

  public SharedModule_ProvideOkHttpFactory(SharedModule module,
      Provider<Interceptor> httpLoggingInterceptorProvider) {
    this.module = module;
    this.httpLoggingInterceptorProvider = httpLoggingInterceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideOkHttp(module, httpLoggingInterceptorProvider.get());
  }

  public static SharedModule_ProvideOkHttpFactory create(SharedModule module,
      Provider<Interceptor> httpLoggingInterceptorProvider) {
    return new SharedModule_ProvideOkHttpFactory(module, httpLoggingInterceptorProvider);
  }

  public static OkHttpClient provideOkHttp(SharedModule instance,
      Interceptor httpLoggingInterceptor) {
    return Preconditions.checkNotNullFromProvides(instance.provideOkHttp(httpLoggingInterceptor));
  }
}
