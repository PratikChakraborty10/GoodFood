// Generated by Dagger (https://dagger.dev).
package com.elbehiry.shared.di;

import com.elbehiry.shared.data.remote.DelishApi;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SharedModule_ProvideDelishApiFactory implements Factory<DelishApi> {
  private final SharedModule module;

  private final Provider<Retrofit> retrofitProvider;

  public SharedModule_ProvideDelishApiFactory(SharedModule module,
      Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public DelishApi get() {
    return provideDelishApi(module, retrofitProvider.get());
  }

  public static SharedModule_ProvideDelishApiFactory create(SharedModule module,
      Provider<Retrofit> retrofitProvider) {
    return new SharedModule_ProvideDelishApiFactory(module, retrofitProvider);
  }

  public static DelishApi provideDelishApi(SharedModule instance, Retrofit retrofit) {
    return Preconditions.checkNotNullFromProvides(instance.provideDelishApi(retrofit));
  }
}
