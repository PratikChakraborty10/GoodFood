// Generated by Dagger (https://dagger.dev).
package com.elbehiry.shared.data.location.remote;

import android.content.Context;
import com.google.android.gms.location.FusedLocationProviderClient;
import com.google.android.gms.location.LocationSettingsRequest;
import com.google.android.gms.location.SettingsClient;
import com.google.android.gms.tasks.CancellationToken;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class LocationRemoteSource_Factory implements Factory<LocationRemoteSource> {
  private final Provider<Context> contextProvider;

  private final Provider<FusedLocationProviderClient> fusedLocationClientProvider;

  private final Provider<CancellationToken> cancellationTokenProvider;

  private final Provider<SettingsClient> locationSettingsClientProvider;

  private final Provider<LocationSettingsRequest> locationSettingsRequestProvider;

  public LocationRemoteSource_Factory(Provider<Context> contextProvider,
      Provider<FusedLocationProviderClient> fusedLocationClientProvider,
      Provider<CancellationToken> cancellationTokenProvider,
      Provider<SettingsClient> locationSettingsClientProvider,
      Provider<LocationSettingsRequest> locationSettingsRequestProvider) {
    this.contextProvider = contextProvider;
    this.fusedLocationClientProvider = fusedLocationClientProvider;
    this.cancellationTokenProvider = cancellationTokenProvider;
    this.locationSettingsClientProvider = locationSettingsClientProvider;
    this.locationSettingsRequestProvider = locationSettingsRequestProvider;
  }

  @Override
  public LocationRemoteSource get() {
    return newInstance(contextProvider.get(), fusedLocationClientProvider.get(), cancellationTokenProvider.get(), locationSettingsClientProvider.get(), locationSettingsRequestProvider.get());
  }

  public static LocationRemoteSource_Factory create(Provider<Context> contextProvider,
      Provider<FusedLocationProviderClient> fusedLocationClientProvider,
      Provider<CancellationToken> cancellationTokenProvider,
      Provider<SettingsClient> locationSettingsClientProvider,
      Provider<LocationSettingsRequest> locationSettingsRequestProvider) {
    return new LocationRemoteSource_Factory(contextProvider, fusedLocationClientProvider, cancellationTokenProvider, locationSettingsClientProvider, locationSettingsRequestProvider);
  }

  public static LocationRemoteSource newInstance(Context context,
      FusedLocationProviderClient fusedLocationClient, CancellationToken cancellationToken,
      SettingsClient locationSettingsClient, LocationSettingsRequest locationSettingsRequest) {
    return new LocationRemoteSource(context, fusedLocationClient, cancellationToken, locationSettingsClient, locationSettingsRequest);
  }
}
