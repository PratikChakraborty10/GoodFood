// Generated by Dagger (https://dagger.dev).
package com.elbehiry.shared.data.db.di;

import com.elbehiry.shared.data.db.datastore.RecipesLocalDataStore;
import com.elbehiry.shared.data.db.recipes.mapper.RecipeMapper;
import com.elbehiry.shared.data.db.recipes.tables.RecipesTable;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DatabaseModule_ProvideRecipeDataStoreFactory implements Factory<RecipesLocalDataStore> {
  private final Provider<RecipesTable> recipesTableProvider;

  private final Provider<RecipeMapper> recipeMapperProvider;

  public DatabaseModule_ProvideRecipeDataStoreFactory(Provider<RecipesTable> recipesTableProvider,
      Provider<RecipeMapper> recipeMapperProvider) {
    this.recipesTableProvider = recipesTableProvider;
    this.recipeMapperProvider = recipeMapperProvider;
  }

  @Override
  public RecipesLocalDataStore get() {
    return provideRecipeDataStore(recipesTableProvider.get(), recipeMapperProvider.get());
  }

  public static DatabaseModule_ProvideRecipeDataStoreFactory create(
      Provider<RecipesTable> recipesTableProvider, Provider<RecipeMapper> recipeMapperProvider) {
    return new DatabaseModule_ProvideRecipeDataStoreFactory(recipesTableProvider, recipeMapperProvider);
  }

  public static RecipesLocalDataStore provideRecipeDataStore(RecipesTable recipesTable,
      RecipeMapper recipeMapper) {
    return Preconditions.checkNotNullFromProvides(DatabaseModule.INSTANCE.provideRecipeDataStore(recipesTable, recipeMapper));
  }
}
