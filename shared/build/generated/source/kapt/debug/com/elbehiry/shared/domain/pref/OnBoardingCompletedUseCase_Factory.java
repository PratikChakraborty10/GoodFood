// Generated by Dagger (https://dagger.dev).
package com.elbehiry.shared.domain.pref;

import com.elbehiry.shared.data.pref.repository.DataStoreOperations;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class OnBoardingCompletedUseCase_Factory implements Factory<OnBoardingCompletedUseCase> {
  private final Provider<DataStoreOperations> dataStoreRepositoryProvider;

  private final Provider<CoroutineDispatcher> dispatcherProvider;

  public OnBoardingCompletedUseCase_Factory(
      Provider<DataStoreOperations> dataStoreRepositoryProvider,
      Provider<CoroutineDispatcher> dispatcherProvider) {
    this.dataStoreRepositoryProvider = dataStoreRepositoryProvider;
    this.dispatcherProvider = dispatcherProvider;
  }

  @Override
  public OnBoardingCompletedUseCase get() {
    return newInstance(dataStoreRepositoryProvider.get(), dispatcherProvider.get());
  }

  public static OnBoardingCompletedUseCase_Factory create(
      Provider<DataStoreOperations> dataStoreRepositoryProvider,
      Provider<CoroutineDispatcher> dispatcherProvider) {
    return new OnBoardingCompletedUseCase_Factory(dataStoreRepositoryProvider, dispatcherProvider);
  }

  public static OnBoardingCompletedUseCase newInstance(DataStoreOperations dataStoreRepository,
      CoroutineDispatcher dispatcher) {
    return new OnBoardingCompletedUseCase(dataStoreRepository, dispatcher);
  }
}
