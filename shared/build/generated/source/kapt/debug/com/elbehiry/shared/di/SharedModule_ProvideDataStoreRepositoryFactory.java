// Generated by Dagger (https://dagger.dev).
package com.elbehiry.shared.di;

import androidx.datastore.core.DataStore;
import androidx.datastore.preferences.core.Preferences;
import com.elbehiry.shared.data.pref.repository.DataStoreOperations;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SharedModule_ProvideDataStoreRepositoryFactory implements Factory<DataStoreOperations> {
  private final SharedModule module;

  private final Provider<DataStore<Preferences>> dataStoreProvider;

  public SharedModule_ProvideDataStoreRepositoryFactory(SharedModule module,
      Provider<DataStore<Preferences>> dataStoreProvider) {
    this.module = module;
    this.dataStoreProvider = dataStoreProvider;
  }

  @Override
  public DataStoreOperations get() {
    return provideDataStoreRepository(module, dataStoreProvider.get());
  }

  public static SharedModule_ProvideDataStoreRepositoryFactory create(SharedModule module,
      Provider<DataStore<Preferences>> dataStoreProvider) {
    return new SharedModule_ProvideDataStoreRepositoryFactory(module, dataStoreProvider);
  }

  public static DataStoreOperations provideDataStoreRepository(SharedModule instance,
      DataStore<Preferences> dataStore) {
    return Preconditions.checkNotNullFromProvides(instance.provideDataStoreRepository(dataStore));
  }
}
