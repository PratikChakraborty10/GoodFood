// Generated by Dagger (https://dagger.dev).
package com.elbehiry.shared.data.db.recipes.recipedatastore;

import com.elbehiry.shared.data.db.recipes.mapper.RecipeMapper;
import com.elbehiry.shared.data.db.recipes.tables.RecipesTable;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RecipesDatabaseDataStore_Factory implements Factory<RecipesDatabaseDataStore> {
  private final Provider<RecipesTable> recipesTableProvider;

  private final Provider<RecipeMapper> recipeMapperProvider;

  private final Provider<CoroutineDispatcher> ioDispatcherProvider;

  public RecipesDatabaseDataStore_Factory(Provider<RecipesTable> recipesTableProvider,
      Provider<RecipeMapper> recipeMapperProvider,
      Provider<CoroutineDispatcher> ioDispatcherProvider) {
    this.recipesTableProvider = recipesTableProvider;
    this.recipeMapperProvider = recipeMapperProvider;
    this.ioDispatcherProvider = ioDispatcherProvider;
  }

  @Override
  public RecipesDatabaseDataStore get() {
    return newInstance(recipesTableProvider.get(), recipeMapperProvider.get(), ioDispatcherProvider.get());
  }

  public static RecipesDatabaseDataStore_Factory create(Provider<RecipesTable> recipesTableProvider,
      Provider<RecipeMapper> recipeMapperProvider,
      Provider<CoroutineDispatcher> ioDispatcherProvider) {
    return new RecipesDatabaseDataStore_Factory(recipesTableProvider, recipeMapperProvider, ioDispatcherProvider);
  }

  public static RecipesDatabaseDataStore newInstance(RecipesTable recipesTable,
      RecipeMapper recipeMapper, CoroutineDispatcher ioDispatcher) {
    return new RecipesDatabaseDataStore(recipesTable, recipeMapper, ioDispatcher);
  }
}
