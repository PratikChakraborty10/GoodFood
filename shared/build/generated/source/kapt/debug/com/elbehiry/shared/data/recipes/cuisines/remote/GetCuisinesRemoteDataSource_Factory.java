// Generated by Dagger (https://dagger.dev).
package com.elbehiry.shared.data.recipes.cuisines.remote;

import com.elbehiry.shared.data.remote.DelishApi;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class GetCuisinesRemoteDataSource_Factory implements Factory<GetCuisinesRemoteDataSource> {
  private final Provider<DelishApi> apiProvider;

  private final Provider<CoroutineDispatcher> ioDispatcherProvider;

  public GetCuisinesRemoteDataSource_Factory(Provider<DelishApi> apiProvider,
      Provider<CoroutineDispatcher> ioDispatcherProvider) {
    this.apiProvider = apiProvider;
    this.ioDispatcherProvider = ioDispatcherProvider;
  }

  @Override
  public GetCuisinesRemoteDataSource get() {
    return newInstance(apiProvider.get(), ioDispatcherProvider.get());
  }

  public static GetCuisinesRemoteDataSource_Factory create(Provider<DelishApi> apiProvider,
      Provider<CoroutineDispatcher> ioDispatcherProvider) {
    return new GetCuisinesRemoteDataSource_Factory(apiProvider, ioDispatcherProvider);
  }

  public static GetCuisinesRemoteDataSource newInstance(DelishApi api,
      CoroutineDispatcher ioDispatcher) {
    return new GetCuisinesRemoteDataSource(api, ioDispatcher);
  }
}
