// Generated by Dagger (https://dagger.dev).
package com.elbehiry.shared.di;

import android.content.Context;
import androidx.datastore.core.DataStore;
import androidx.datastore.preferences.core.Preferences;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SharedModule_ProvideDataStoreFactory implements Factory<DataStore<Preferences>> {
  private final SharedModule module;

  private final Provider<Context> contextProvider;

  public SharedModule_ProvideDataStoreFactory(SharedModule module,
      Provider<Context> contextProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
  }

  @Override
  public DataStore<Preferences> get() {
    return provideDataStore(module, contextProvider.get());
  }

  public static SharedModule_ProvideDataStoreFactory create(SharedModule module,
      Provider<Context> contextProvider) {
    return new SharedModule_ProvideDataStoreFactory(module, contextProvider);
  }

  public static DataStore<Preferences> provideDataStore(SharedModule instance, Context context) {
    return Preconditions.checkNotNullFromProvides(instance.provideDataStore(context));
  }
}
