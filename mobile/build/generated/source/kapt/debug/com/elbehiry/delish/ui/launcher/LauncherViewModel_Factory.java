// Generated by Dagger (https://dagger.dev).
package com.elbehiry.delish.ui.launcher;

import com.elbehiry.shared.domain.pref.OnBoardingCompletedUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class LauncherViewModel_Factory implements Factory<LauncherViewModel> {
  private final Provider<OnBoardingCompletedUseCase> onBoardingCompletedUseCaseProvider;

  public LauncherViewModel_Factory(
      Provider<OnBoardingCompletedUseCase> onBoardingCompletedUseCaseProvider) {
    this.onBoardingCompletedUseCaseProvider = onBoardingCompletedUseCaseProvider;
  }

  @Override
  public LauncherViewModel get() {
    return newInstance(onBoardingCompletedUseCaseProvider.get());
  }

  public static LauncherViewModel_Factory create(
      Provider<OnBoardingCompletedUseCase> onBoardingCompletedUseCaseProvider) {
    return new LauncherViewModel_Factory(onBoardingCompletedUseCaseProvider);
  }

  public static LauncherViewModel newInstance(
      OnBoardingCompletedUseCase onBoardingCompletedUseCase) {
    return new LauncherViewModel(onBoardingCompletedUseCase);
  }
}
