// Generated by Dagger (https://dagger.dev).
package com.elbehiry.delish;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.datastore.core.DataStore;
import androidx.datastore.preferences.core.Preferences;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.elbehiry.delish.di.AppModule;
import com.elbehiry.delish.di.CoroutinesModule;
import com.elbehiry.delish.di.CoroutinesModule_ProvidesIoDispatcherFactory;
import com.elbehiry.delish.ui.bookmark.BookmarkViewModel;
import com.elbehiry.delish.ui.bookmark.BookmarkViewModel_HiltModules_KeyModule_ProvideFactory;
import com.elbehiry.delish.ui.launcher.LauncherActivity;
import com.elbehiry.delish.ui.launcher.LauncherViewModel;
import com.elbehiry.delish.ui.launcher.LauncherViewModel_HiltModules_KeyModule_ProvideFactory;
import com.elbehiry.delish.ui.main.MainActivity;
import com.elbehiry.delish.ui.map.MapFragment;
import com.elbehiry.delish.ui.map.MapViewModel;
import com.elbehiry.delish.ui.map.MapViewModel_HiltModules_KeyModule_ProvideFactory;
import com.elbehiry.delish.ui.onboarding.OnBoardingActivity;
import com.elbehiry.delish.ui.onboarding.OnBoardingViewModel;
import com.elbehiry.delish.ui.onboarding.OnBoardingViewModel_HiltModules_KeyModule_ProvideFactory;
import com.elbehiry.delish.ui.plan.MealPlanViewModel;
import com.elbehiry.delish.ui.plan.MealPlanViewModel_HiltModules_KeyModule_ProvideFactory;
import com.elbehiry.delish.ui.recipedetails.RecipeDetailsFragment;
import com.elbehiry.delish.ui.recipedetails.RecipeDetailsViewModel;
import com.elbehiry.delish.ui.recipedetails.RecipeDetailsViewModel_HiltModules_KeyModule_ProvideFactory;
import com.elbehiry.delish.ui.recipes.HomeFragment;
import com.elbehiry.delish.ui.recipes.RecipesViewModel;
import com.elbehiry.delish.ui.recipes.RecipesViewModel_HiltModules_KeyModule_ProvideFactory;
import com.elbehiry.delish.ui.search.SearchFragment;
import com.elbehiry.delish.ui.search.SearchRecipesViewModel;
import com.elbehiry.delish.ui.search.SearchRecipesViewModel_HiltModules_KeyModule_ProvideFactory;
import com.elbehiry.shared.data.db.DelishDataBase;
import com.elbehiry.shared.data.db.JsonConverter;
import com.elbehiry.shared.data.db.datastore.RecipesLocalDataStore;
import com.elbehiry.shared.data.db.di.DatabaseModule;
import com.elbehiry.shared.data.db.di.DatabaseModule_ProvideDelishDatabaseFactory;
import com.elbehiry.shared.data.db.di.DatabaseModule_ProvideJsonConverterFactory;
import com.elbehiry.shared.data.db.di.DatabaseModule_ProvideRecipeDataStoreFactory;
import com.elbehiry.shared.data.db.di.DatabaseModule_ProvideRecipesMapperFactory;
import com.elbehiry.shared.data.db.di.DatabaseModule_ProvideRecipesTableFactory;
import com.elbehiry.shared.data.db.di.HiltWrapper_DatabaseModule;
import com.elbehiry.shared.data.db.recipes.mapper.RecipeMapper;
import com.elbehiry.shared.data.db.recipes.tables.RecipesTable;
import com.elbehiry.shared.data.location.remote.LocationRemoteSource;
import com.elbehiry.shared.data.location.repository.LocationRepository;
import com.elbehiry.shared.data.plan.remote.MealPlanDataSource;
import com.elbehiry.shared.data.plan.repository.GetMealPlanRepository;
import com.elbehiry.shared.data.pref.repository.DataStoreOperations;
import com.elbehiry.shared.data.recipes.cuisines.remote.GetCuisinesDataSource;
import com.elbehiry.shared.data.recipes.cuisines.repository.CuisinesRepository;
import com.elbehiry.shared.data.recipes.info.remote.RecipeInformationDataSource;
import com.elbehiry.shared.data.recipes.info.repository.RecipeInformationRepository;
import com.elbehiry.shared.data.recipes.ingredients.remote.GetIngredientsDataSource;
import com.elbehiry.shared.data.recipes.ingredients.repository.IngredientsRepository;
import com.elbehiry.shared.data.recipes.random.remote.RandomRecipesRemoteDataSource;
import com.elbehiry.shared.data.recipes.random.repository.RandomRecipesRepository;
import com.elbehiry.shared.data.recipes.search.remote.SearchDataSource;
import com.elbehiry.shared.data.recipes.search.repository.SearchRepository;
import com.elbehiry.shared.data.remote.DelishApi;
import com.elbehiry.shared.data.restaurants.remote.ISearchRestaurantsDataSource;
import com.elbehiry.shared.data.restaurants.repository.ISearchRestaurantsRepository;
import com.elbehiry.shared.di.MapModule;
import com.elbehiry.shared.di.MapModule_ProvideSearchDataSourceFactory;
import com.elbehiry.shared.di.MapModule_ProvideSearchRepositoryFactory;
import com.elbehiry.shared.di.MapModule_ProvidesCancellationToken$shared_debugFactory;
import com.elbehiry.shared.di.MapModule_ProvidesFusedLocationProviderClient$shared_debugFactory;
import com.elbehiry.shared.di.MapModule_ProvidesLocationRequest$shared_debugFactory;
import com.elbehiry.shared.di.MapModule_ProvidesLocationSettingsClient$shared_debugFactory;
import com.elbehiry.shared.di.MapModule_ProvidesLocationSettingsRequest$shared_debugFactory;
import com.elbehiry.shared.di.RecipesModule;
import com.elbehiry.shared.di.RecipesModule_ProvideCuisinesRepositoryFactory;
import com.elbehiry.shared.di.RecipesModule_ProvideGetCuisinesDataSourceFactory;
import com.elbehiry.shared.di.RecipesModule_ProvideIngredientsDataSourceFactory;
import com.elbehiry.shared.di.RecipesModule_ProvideIngredientsRepositoryFactory;
import com.elbehiry.shared.di.RecipesModule_ProvideMealPlanDataSourceFactory;
import com.elbehiry.shared.di.RecipesModule_ProvideRandomRecipesDataSourceFactory;
import com.elbehiry.shared.di.RecipesModule_ProvideRandomRecipesRepositoryFactory;
import com.elbehiry.shared.di.RecipesModule_ProvideRecipeInformationDataSourceFactory;
import com.elbehiry.shared.di.RecipesModule_ProvideRecipeInformationRepositoryFactory;
import com.elbehiry.shared.di.RecipesModule_ProvideSearchDataSourceFactory;
import com.elbehiry.shared.di.RecipesModule_ProvideSearchRepositoryFactory;
import com.elbehiry.shared.di.SharedModule;
import com.elbehiry.shared.di.SharedModule_ProvideDataStoreFactory;
import com.elbehiry.shared.di.SharedModule_ProvideDataStoreRepositoryFactory;
import com.elbehiry.shared.di.SharedModule_ProvideDelishApiFactory;
import com.elbehiry.shared.di.SharedModule_ProvideHttpLoggingInterceptor$shared_debugFactory;
import com.elbehiry.shared.di.SharedModule_ProvideMoshiFactory;
import com.elbehiry.shared.di.SharedModule_ProvideOkHttpFactory;
import com.elbehiry.shared.di.SharedModule_ProvideRetroFitFactory;
import com.elbehiry.shared.domain.location.GetCurrentLocationUseCase;
import com.elbehiry.shared.domain.plan.GetMealPlanUseCase;
import com.elbehiry.shared.domain.pref.OnBoardingCompleteActionSuspendUseCase;
import com.elbehiry.shared.domain.pref.OnBoardingCompletedUseCase;
import com.elbehiry.shared.domain.recipes.bookmark.DeleteRecipeSuspendUseCase;
import com.elbehiry.shared.domain.recipes.bookmark.GetSavedRecipesUseCase;
import com.elbehiry.shared.domain.recipes.bookmark.IsRecipeSavedSuspendUseCase;
import com.elbehiry.shared.domain.recipes.bookmark.SaveRecipeSuspendUseCase;
import com.elbehiry.shared.domain.recipes.cuisines.GetAvailableCuisinesUseCase;
import com.elbehiry.shared.domain.recipes.information.GetRecipeInformationSuspendUseCase;
import com.elbehiry.shared.domain.recipes.ingredients.GetIngredientsUseCase;
import com.elbehiry.shared.domain.recipes.random.GetRandomRecipesUseCase;
import com.elbehiry.shared.domain.recipes.search.SearchRecipesUseCase;
import com.elbehiry.shared.domain.restaurants.CreateFoursquareVersionUseCase;
import com.elbehiry.shared.domain.restaurants.SearchRestaurantsUseCase;
import com.google.android.gms.location.FusedLocationProviderClient;
import com.google.android.gms.location.LocationSettingsRequest;
import com.google.android.gms.location.SettingsClient;
import com.squareup.moshi.Moshi;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.MemoizedSentinel;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import okhttp3.Interceptor;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerMainApplication_HiltComponents_SingletonC extends MainApplication_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private final SharedModule sharedModule;

  private final MapModule mapModule;

  private final RecipesModule recipesModule;

  private final DaggerMainApplication_HiltComponents_SingletonC singletonC = this;

  private volatile Object delishDataBase = new MemoizedSentinel();

  private volatile Object recipesTable = new MemoizedSentinel();

  private volatile Object moshi = new MemoizedSentinel();

  private volatile Object jsonConverter = new MemoizedSentinel();

  private volatile Object recipeMapper = new MemoizedSentinel();

  private volatile Object recipesLocalDataStore = new MemoizedSentinel();

  private volatile Object dataStoreOfPreferences = new MemoizedSentinel();

  private volatile Object dataStoreOperations = new MemoizedSentinel();

  private volatile Object namedInterceptor = new MemoizedSentinel();

  private volatile Object okHttpClient = new MemoizedSentinel();

  private volatile Object retrofit = new MemoizedSentinel();

  private volatile Object delishApi = new MemoizedSentinel();

  private DaggerMainApplication_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam, MapModule mapModuleParam,
      RecipesModule recipesModuleParam, SharedModule sharedModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;
    this.sharedModule = sharedModuleParam;
    this.mapModule = mapModuleParam;
    this.recipesModule = recipesModuleParam;

  }

  public static Builder builder() {
    return new Builder();
  }

  private DelishDataBase delishDataBase() {
    Object local = delishDataBase;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = delishDataBase;
        if (local instanceof MemoizedSentinel) {
          local = DatabaseModule_ProvideDelishDatabaseFactory.provideDelishDatabase(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
          delishDataBase = DoubleCheck.reentrantCheck(delishDataBase, local);
        }
      }
    }
    return (DelishDataBase) local;
  }

  private RecipesTable recipesTable() {
    Object local = recipesTable;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = recipesTable;
        if (local instanceof MemoizedSentinel) {
          local = DatabaseModule_ProvideRecipesTableFactory.provideRecipesTable(delishDataBase());
          recipesTable = DoubleCheck.reentrantCheck(recipesTable, local);
        }
      }
    }
    return (RecipesTable) local;
  }

  private Moshi moshi() {
    Object local = moshi;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = moshi;
        if (local instanceof MemoizedSentinel) {
          local = SharedModule_ProvideMoshiFactory.provideMoshi(sharedModule);
          moshi = DoubleCheck.reentrantCheck(moshi, local);
        }
      }
    }
    return (Moshi) local;
  }

  private JsonConverter jsonConverter() {
    Object local = jsonConverter;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = jsonConverter;
        if (local instanceof MemoizedSentinel) {
          local = DatabaseModule_ProvideJsonConverterFactory.provideJsonConverter(moshi());
          jsonConverter = DoubleCheck.reentrantCheck(jsonConverter, local);
        }
      }
    }
    return (JsonConverter) local;
  }

  private RecipeMapper recipeMapper() {
    Object local = recipeMapper;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = recipeMapper;
        if (local instanceof MemoizedSentinel) {
          local = DatabaseModule_ProvideRecipesMapperFactory.provideRecipesMapper(jsonConverter());
          recipeMapper = DoubleCheck.reentrantCheck(recipeMapper, local);
        }
      }
    }
    return (RecipeMapper) local;
  }

  private RecipesLocalDataStore recipesLocalDataStore() {
    Object local = recipesLocalDataStore;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = recipesLocalDataStore;
        if (local instanceof MemoizedSentinel) {
          local = DatabaseModule_ProvideRecipeDataStoreFactory.provideRecipeDataStore(recipesTable(), recipeMapper());
          recipesLocalDataStore = DoubleCheck.reentrantCheck(recipesLocalDataStore, local);
        }
      }
    }
    return (RecipesLocalDataStore) local;
  }

  private DataStore<Preferences> dataStoreOfPreferences() {
    Object local = dataStoreOfPreferences;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = dataStoreOfPreferences;
        if (local instanceof MemoizedSentinel) {
          local = SharedModule_ProvideDataStoreFactory.provideDataStore(sharedModule, ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
          dataStoreOfPreferences = DoubleCheck.reentrantCheck(dataStoreOfPreferences, local);
        }
      }
    }
    return (DataStore<Preferences>) local;
  }

  private DataStoreOperations dataStoreOperations() {
    Object local = dataStoreOperations;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = dataStoreOperations;
        if (local instanceof MemoizedSentinel) {
          local = SharedModule_ProvideDataStoreRepositoryFactory.provideDataStoreRepository(sharedModule, dataStoreOfPreferences());
          dataStoreOperations = DoubleCheck.reentrantCheck(dataStoreOperations, local);
        }
      }
    }
    return (DataStoreOperations) local;
  }

  private Interceptor namedInterceptor() {
    Object local = namedInterceptor;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = namedInterceptor;
        if (local instanceof MemoizedSentinel) {
          local = SharedModule_ProvideHttpLoggingInterceptor$shared_debugFactory.provideHttpLoggingInterceptor$shared_debug(sharedModule);
          namedInterceptor = DoubleCheck.reentrantCheck(namedInterceptor, local);
        }
      }
    }
    return (Interceptor) local;
  }

  private OkHttpClient okHttpClient() {
    Object local = okHttpClient;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = okHttpClient;
        if (local instanceof MemoizedSentinel) {
          local = SharedModule_ProvideOkHttpFactory.provideOkHttp(sharedModule, namedInterceptor());
          okHttpClient = DoubleCheck.reentrantCheck(okHttpClient, local);
        }
      }
    }
    return (OkHttpClient) local;
  }

  private Retrofit retrofit() {
    Object local = retrofit;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = retrofit;
        if (local instanceof MemoizedSentinel) {
          local = SharedModule_ProvideRetroFitFactory.provideRetroFit(sharedModule, okHttpClient(), moshi());
          retrofit = DoubleCheck.reentrantCheck(retrofit, local);
        }
      }
    }
    return (Retrofit) local;
  }

  private DelishApi delishApi() {
    Object local = delishApi;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = delishApi;
        if (local instanceof MemoizedSentinel) {
          local = SharedModule_ProvideDelishApiFactory.provideDelishApi(sharedModule, retrofit());
          delishApi = DoubleCheck.reentrantCheck(delishApi, local);
        }
      }
    }
    return (DelishApi) local;
  }

  private ISearchRestaurantsDataSource iSearchRestaurantsDataSource() {
    return MapModule_ProvideSearchDataSourceFactory.provideSearchDataSource(mapModule, delishApi());
  }

  private ISearchRestaurantsRepository iSearchRestaurantsRepository() {
    return MapModule_ProvideSearchRepositoryFactory.provideSearchRepository(mapModule, iSearchRestaurantsDataSource());
  }

  private FusedLocationProviderClient fusedLocationProviderClient() {
    return MapModule_ProvidesFusedLocationProviderClient$shared_debugFactory.providesFusedLocationProviderClient$shared_debug(mapModule, ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private SettingsClient settingsClient() {
    return MapModule_ProvidesLocationSettingsClient$shared_debugFactory.providesLocationSettingsClient$shared_debug(mapModule, ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private LocationSettingsRequest locationSettingsRequest() {
    return MapModule_ProvidesLocationSettingsRequest$shared_debugFactory.providesLocationSettingsRequest$shared_debug(mapModule, MapModule_ProvidesLocationRequest$shared_debugFactory.providesLocationRequest$shared_debug(mapModule));
  }

  private LocationRemoteSource locationRemoteSource() {
    return new LocationRemoteSource(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule), fusedLocationProviderClient(), MapModule_ProvidesCancellationToken$shared_debugFactory.providesCancellationToken$shared_debug(mapModule), settingsClient(), locationSettingsRequest());
  }

  private LocationRepository locationRepository() {
    return new LocationRepository(locationRemoteSource());
  }

  private MealPlanDataSource mealPlanDataSource() {
    return RecipesModule_ProvideMealPlanDataSourceFactory.provideMealPlanDataSource(recipesModule, delishApi());
  }

  private RecipeInformationDataSource recipeInformationDataSource() {
    return RecipesModule_ProvideRecipeInformationDataSourceFactory.provideRecipeInformationDataSource(recipesModule, delishApi());
  }

  private RecipeInformationRepository recipeInformationRepository() {
    return RecipesModule_ProvideRecipeInformationRepositoryFactory.provideRecipeInformationRepository(recipesModule, recipeInformationDataSource(), recipesLocalDataStore());
  }

  private RandomRecipesRemoteDataSource randomRecipesRemoteDataSource() {
    return RecipesModule_ProvideRandomRecipesDataSourceFactory.provideRandomRecipesDataSource(recipesModule, delishApi());
  }

  private RandomRecipesRepository randomRecipesRepository() {
    return RecipesModule_ProvideRandomRecipesRepositoryFactory.provideRandomRecipesRepository(recipesModule, randomRecipesRemoteDataSource());
  }

  private GetCuisinesDataSource getCuisinesDataSource() {
    return RecipesModule_ProvideGetCuisinesDataSourceFactory.provideGetCuisinesDataSource(recipesModule, delishApi());
  }

  private CuisinesRepository cuisinesRepository() {
    return RecipesModule_ProvideCuisinesRepositoryFactory.provideCuisinesRepository(recipesModule, getCuisinesDataSource());
  }

  private GetIngredientsDataSource getIngredientsDataSource() {
    return RecipesModule_ProvideIngredientsDataSourceFactory.provideIngredientsDataSource(recipesModule, delishApi());
  }

  private IngredientsRepository ingredientsRepository() {
    return RecipesModule_ProvideIngredientsRepositoryFactory.provideIngredientsRepository(recipesModule, getIngredientsDataSource());
  }

  private SearchDataSource searchDataSource() {
    return RecipesModule_ProvideSearchDataSourceFactory.provideSearchDataSource(recipesModule, delishApi());
  }

  private SearchRepository searchRepository() {
    return RecipesModule_ProvideSearchRepositoryFactory.provideSearchRepository(recipesModule, searchDataSource());
  }

  @Override
  public void injectMainApplication(MainApplication mainApplication) {
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder(singletonC);
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder(singletonC);
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private MapModule mapModule;

    private RecipesModule recipesModule;

    private SharedModule sharedModule;

    private Builder() {
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder appModule(AppModule appModule) {
      Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder coroutinesModule(CoroutinesModule coroutinesModule) {
      Preconditions.checkNotNull(coroutinesModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_DatabaseModule(
        HiltWrapper_DatabaseModule hiltWrapper_DatabaseModule) {
      Preconditions.checkNotNull(hiltWrapper_DatabaseModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder databaseModule(DatabaseModule databaseModule) {
      Preconditions.checkNotNull(databaseModule);
      return this;
    }

    public Builder mapModule(MapModule mapModule) {
      this.mapModule = Preconditions.checkNotNull(mapModule);
      return this;
    }

    public Builder recipesModule(RecipesModule recipesModule) {
      this.recipesModule = Preconditions.checkNotNull(recipesModule);
      return this;
    }

    public Builder sharedModule(SharedModule sharedModule) {
      this.sharedModule = Preconditions.checkNotNull(sharedModule);
      return this;
    }

    public MainApplication_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      if (mapModule == null) {
        this.mapModule = new MapModule();
      }
      if (recipesModule == null) {
        this.recipesModule = new RecipesModule();
      }
      if (sharedModule == null) {
        this.sharedModule = new SharedModule();
      }
      return new DaggerMainApplication_HiltComponents_SingletonC(applicationContextModule, mapModule, recipesModule, sharedModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements MainApplication_HiltComponents.ActivityRetainedC.Builder {
    private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

    private ActivityRetainedCBuilder(DaggerMainApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public MainApplication_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonC);
    }
  }

  private static final class ActivityRetainedCImpl extends MainApplication_HiltComponents.ActivityRetainedC {
    private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    private volatile Object lifecycle = new MemoizedSentinel();

    private ActivityRetainedCImpl(DaggerMainApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;


    }

    private Object lifecycle() {
      Object local = lifecycle;
      if (local instanceof MemoizedSentinel) {
        synchronized (local) {
          local = lifecycle;
          if (local instanceof MemoizedSentinel) {
            local = ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();
            lifecycle = DoubleCheck.reentrantCheck(lifecycle, local);
          }
        }
      }
      return (Object) local;
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycle();
    }

    private static final class ActivityCBuilder implements MainApplication_HiltComponents.ActivityC.Builder {
      private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private Activity activity;

      private ActivityCBuilder(DaggerMainApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
      }

      @Override
      public ActivityCBuilder activity(Activity activity) {
        this.activity = Preconditions.checkNotNull(activity);
        return this;
      }

      @Override
      public MainApplication_HiltComponents.ActivityC build() {
        Preconditions.checkBuilderRequirement(activity, Activity.class);
        return new ActivityCImpl(singletonC, activityRetainedCImpl, activity);
      }
    }

    private static final class ActivityCImpl extends MainApplication_HiltComponents.ActivityC {
      private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ActivityCImpl activityCImpl = this;

      private ActivityCImpl(DaggerMainApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;


      }

      @Override
      public void injectLauncherActivity(LauncherActivity launcherActivity) {
      }

      @Override
      public void injectMainActivity(MainActivity mainActivity) {
      }

      @Override
      public void injectOnBoardingActivity(OnBoardingActivity onBoardingActivity) {
      }

      @Override
      public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
        return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(singletonC, activityRetainedCImpl));
      }

      @Override
      public Set<String> getViewModelKeys() {
        return SetBuilder.<String>newSetBuilder(8).add(BookmarkViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(LauncherViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(MapViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(MealPlanViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(OnBoardingViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(RecipeDetailsViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(RecipesViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(SearchRecipesViewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
      }

      @Override
      public ViewModelComponentBuilder getViewModelComponentBuilder() {
        return new ViewModelCBuilder(singletonC, activityRetainedCImpl);
      }

      @Override
      public FragmentComponentBuilder fragmentComponentBuilder() {
        return new FragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
      }

      @Override
      public ViewComponentBuilder viewComponentBuilder() {
        return new ViewCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
      }

      private static final class FragmentCBuilder implements MainApplication_HiltComponents.FragmentC.Builder {
        private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ActivityCImpl activityCImpl;

        private Fragment fragment;

        private FragmentCBuilder(DaggerMainApplication_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.activityCImpl = activityCImpl;
        }

        @Override
        public FragmentCBuilder fragment(Fragment fragment) {
          this.fragment = Preconditions.checkNotNull(fragment);
          return this;
        }

        @Override
        public MainApplication_HiltComponents.FragmentC build() {
          Preconditions.checkBuilderRequirement(fragment, Fragment.class);
          return new FragmentCI(singletonC, activityRetainedCImpl, activityCImpl, fragment);
        }
      }

      private static final class FragmentCI extends MainApplication_HiltComponents.FragmentC {
        private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ActivityCImpl activityCImpl;

        private final FragmentCI fragmentCI = this;

        private FragmentCI(DaggerMainApplication_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
            Fragment fragmentParam) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.activityCImpl = activityCImpl;


        }

        @Override
        public void injectMapFragment(MapFragment mapFragment) {
        }

        @Override
        public void injectRecipeDetailsFragment(RecipeDetailsFragment recipeDetailsFragment) {
        }

        @Override
        public void injectHomeFragment(HomeFragment homeFragment) {
        }

        @Override
        public void injectSearchFragment(SearchFragment searchFragment) {
        }

        @Override
        public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
          return activityCImpl.getHiltInternalFactoryFactory();
        }

        @Override
        public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
          return new ViewWithFragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl, fragmentCI);
        }

        private static final class ViewWithFragmentCBuilder implements MainApplication_HiltComponents.ViewWithFragmentC.Builder {
          private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

          private final ActivityRetainedCImpl activityRetainedCImpl;

          private final ActivityCImpl activityCImpl;

          private final FragmentCI fragmentCI;

          private View view;

          private ViewWithFragmentCBuilder(
              DaggerMainApplication_HiltComponents_SingletonC singletonC,
              ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
              FragmentCI fragmentCI) {
            this.singletonC = singletonC;
            this.activityRetainedCImpl = activityRetainedCImpl;
            this.activityCImpl = activityCImpl;
            this.fragmentCI = fragmentCI;
          }

          @Override
          public ViewWithFragmentCBuilder view(View view) {
            this.view = Preconditions.checkNotNull(view);
            return this;
          }

          @Override
          public MainApplication_HiltComponents.ViewWithFragmentC build() {
            Preconditions.checkBuilderRequirement(view, View.class);
            return new ViewWithFragmentCI(singletonC, activityRetainedCImpl, activityCImpl, fragmentCI, view);
          }
        }

        private static final class ViewWithFragmentCI extends MainApplication_HiltComponents.ViewWithFragmentC {
          private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

          private final ActivityRetainedCImpl activityRetainedCImpl;

          private final ActivityCImpl activityCImpl;

          private final FragmentCI fragmentCI;

          private final ViewWithFragmentCI viewWithFragmentCI = this;

          private ViewWithFragmentCI(DaggerMainApplication_HiltComponents_SingletonC singletonC,
              ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
              FragmentCI fragmentCI, View viewParam) {
            this.singletonC = singletonC;
            this.activityRetainedCImpl = activityRetainedCImpl;
            this.activityCImpl = activityCImpl;
            this.fragmentCI = fragmentCI;


          }
        }
      }

      private static final class ViewCBuilder implements MainApplication_HiltComponents.ViewC.Builder {
        private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ActivityCImpl activityCImpl;

        private View view;

        private ViewCBuilder(DaggerMainApplication_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.activityCImpl = activityCImpl;
        }

        @Override
        public ViewCBuilder view(View view) {
          this.view = Preconditions.checkNotNull(view);
          return this;
        }

        @Override
        public MainApplication_HiltComponents.ViewC build() {
          Preconditions.checkBuilderRequirement(view, View.class);
          return new ViewCI(singletonC, activityRetainedCImpl, activityCImpl, view);
        }
      }

      private static final class ViewCI extends MainApplication_HiltComponents.ViewC {
        private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ActivityCImpl activityCImpl;

        private final ViewCI viewCI = this;

        private ViewCI(DaggerMainApplication_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
            View viewParam) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.activityCImpl = activityCImpl;


        }
      }
    }

    private static final class ViewModelCBuilder implements MainApplication_HiltComponents.ViewModelC.Builder {
      private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private SavedStateHandle savedStateHandle;

      private ViewModelCBuilder(DaggerMainApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
      }

      @Override
      public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
        this.savedStateHandle = Preconditions.checkNotNull(handle);
        return this;
      }

      @Override
      public MainApplication_HiltComponents.ViewModelC build() {
        Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
        return new ViewModelCImpl(singletonC, activityRetainedCImpl, savedStateHandle);
      }
    }

    private static final class ViewModelCImpl extends MainApplication_HiltComponents.ViewModelC {
      private final SavedStateHandle savedStateHandle;

      private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl = this;

      private volatile Provider<BookmarkViewModel> bookmarkViewModelProvider;

      private volatile Provider<LauncherViewModel> launcherViewModelProvider;

      private volatile Provider<MapViewModel> mapViewModelProvider;

      private volatile Provider<MealPlanViewModel> mealPlanViewModelProvider;

      private volatile Provider<OnBoardingViewModel> onBoardingViewModelProvider;

      private volatile Provider<RecipeDetailsViewModel> recipeDetailsViewModelProvider;

      private volatile Provider<RecipesViewModel> recipesViewModelProvider;

      private volatile Provider<SearchRecipesViewModel> searchRecipesViewModelProvider;

      private ViewModelCImpl(DaggerMainApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.savedStateHandle = savedStateHandleParam;

      }

      private GetSavedRecipesUseCase getSavedRecipesUseCase() {
        return new GetSavedRecipesUseCase(singletonC.recipesLocalDataStore(), CoroutinesModule_ProvidesIoDispatcherFactory.providesIoDispatcher());
      }

      private DeleteRecipeSuspendUseCase deleteRecipeSuspendUseCase() {
        return new DeleteRecipeSuspendUseCase(singletonC.recipesLocalDataStore(), CoroutinesModule_ProvidesIoDispatcherFactory.providesIoDispatcher());
      }

      private BookmarkViewModel bookmarkViewModel() {
        return new BookmarkViewModel(getSavedRecipesUseCase(), deleteRecipeSuspendUseCase());
      }

      private Provider<BookmarkViewModel> bookmarkViewModelProvider() {
        Object local = bookmarkViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 0);
          bookmarkViewModelProvider = (Provider<BookmarkViewModel>) local;
        }
        return (Provider<BookmarkViewModel>) local;
      }

      private OnBoardingCompletedUseCase onBoardingCompletedUseCase() {
        return new OnBoardingCompletedUseCase(singletonC.dataStoreOperations(), CoroutinesModule_ProvidesIoDispatcherFactory.providesIoDispatcher());
      }

      private LauncherViewModel launcherViewModel() {
        return new LauncherViewModel(onBoardingCompletedUseCase());
      }

      private Provider<LauncherViewModel> launcherViewModelProvider() {
        Object local = launcherViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 1);
          launcherViewModelProvider = (Provider<LauncherViewModel>) local;
        }
        return (Provider<LauncherViewModel>) local;
      }

      private SearchRestaurantsUseCase searchRestaurantsUseCase() {
        return new SearchRestaurantsUseCase(singletonC.iSearchRestaurantsRepository(), CoroutinesModule_ProvidesIoDispatcherFactory.providesIoDispatcher());
      }

      private GetCurrentLocationUseCase getCurrentLocationUseCase() {
        return new GetCurrentLocationUseCase(singletonC.locationRepository(), CoroutinesModule_ProvidesIoDispatcherFactory.providesIoDispatcher());
      }

      private MapViewModel mapViewModel() {
        return new MapViewModel(searchRestaurantsUseCase(), new CreateFoursquareVersionUseCase(), getCurrentLocationUseCase(), savedStateHandle);
      }

      private Provider<MapViewModel> mapViewModelProvider() {
        Object local = mapViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 2);
          mapViewModelProvider = (Provider<MapViewModel>) local;
        }
        return (Provider<MapViewModel>) local;
      }

      private GetMealPlanRepository getMealPlanRepository() {
        return new GetMealPlanRepository(singletonC.mealPlanDataSource());
      }

      private GetMealPlanUseCase getMealPlanUseCase() {
        return new GetMealPlanUseCase(getMealPlanRepository(), CoroutinesModule_ProvidesIoDispatcherFactory.providesIoDispatcher());
      }

      private MealPlanViewModel mealPlanViewModel() {
        return new MealPlanViewModel(getMealPlanUseCase());
      }

      private Provider<MealPlanViewModel> mealPlanViewModelProvider() {
        Object local = mealPlanViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 3);
          mealPlanViewModelProvider = (Provider<MealPlanViewModel>) local;
        }
        return (Provider<MealPlanViewModel>) local;
      }

      private OnBoardingCompleteActionSuspendUseCase onBoardingCompleteActionSuspendUseCase() {
        return new OnBoardingCompleteActionSuspendUseCase(singletonC.dataStoreOperations(), CoroutinesModule_ProvidesIoDispatcherFactory.providesIoDispatcher());
      }

      private OnBoardingViewModel onBoardingViewModel() {
        return new OnBoardingViewModel(onBoardingCompleteActionSuspendUseCase());
      }

      private Provider<OnBoardingViewModel> onBoardingViewModelProvider() {
        Object local = onBoardingViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 4);
          onBoardingViewModelProvider = (Provider<OnBoardingViewModel>) local;
        }
        return (Provider<OnBoardingViewModel>) local;
      }

      private GetRecipeInformationSuspendUseCase getRecipeInformationSuspendUseCase() {
        return new GetRecipeInformationSuspendUseCase(singletonC.recipeInformationRepository(), CoroutinesModule_ProvidesIoDispatcherFactory.providesIoDispatcher());
      }

      private SaveRecipeSuspendUseCase saveRecipeSuspendUseCase() {
        return new SaveRecipeSuspendUseCase(singletonC.recipesLocalDataStore(), CoroutinesModule_ProvidesIoDispatcherFactory.providesIoDispatcher());
      }

      private RecipeDetailsViewModel recipeDetailsViewModel() {
        return new RecipeDetailsViewModel(getRecipeInformationSuspendUseCase(), saveRecipeSuspendUseCase());
      }

      private Provider<RecipeDetailsViewModel> recipeDetailsViewModelProvider() {
        Object local = recipeDetailsViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 5);
          recipeDetailsViewModelProvider = (Provider<RecipeDetailsViewModel>) local;
        }
        return (Provider<RecipeDetailsViewModel>) local;
      }

      private GetRandomRecipesUseCase getRandomRecipesUseCase() {
        return new GetRandomRecipesUseCase(singletonC.randomRecipesRepository());
      }

      private GetAvailableCuisinesUseCase getAvailableCuisinesUseCase() {
        return new GetAvailableCuisinesUseCase(singletonC.cuisinesRepository());
      }

      private IsRecipeSavedSuspendUseCase isRecipeSavedSuspendUseCase() {
        return new IsRecipeSavedSuspendUseCase(singletonC.recipesLocalDataStore(), CoroutinesModule_ProvidesIoDispatcherFactory.providesIoDispatcher());
      }

      private GetIngredientsUseCase getIngredientsUseCase() {
        return new GetIngredientsUseCase(singletonC.ingredientsRepository());
      }

      private RecipesViewModel recipesViewModel() {
        return new RecipesViewModel(getRandomRecipesUseCase(), getAvailableCuisinesUseCase(), saveRecipeSuspendUseCase(), deleteRecipeSuspendUseCase(), isRecipeSavedSuspendUseCase(), getIngredientsUseCase());
      }

      private Provider<RecipesViewModel> recipesViewModelProvider() {
        Object local = recipesViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 6);
          recipesViewModelProvider = (Provider<RecipesViewModel>) local;
        }
        return (Provider<RecipesViewModel>) local;
      }

      private SearchRecipesUseCase searchRecipesUseCase() {
        return new SearchRecipesUseCase(singletonC.searchRepository());
      }

      private SearchRecipesViewModel searchRecipesViewModel() {
        return new SearchRecipesViewModel(searchRecipesUseCase());
      }

      private Provider<SearchRecipesViewModel> searchRecipesViewModelProvider() {
        Object local = searchRecipesViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 7);
          searchRecipesViewModelProvider = (Provider<SearchRecipesViewModel>) local;
        }
        return (Provider<SearchRecipesViewModel>) local;
      }

      @Override
      public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
        return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(8).put("com.elbehiry.delish.ui.bookmark.BookmarkViewModel", (Provider) bookmarkViewModelProvider()).put("com.elbehiry.delish.ui.launcher.LauncherViewModel", (Provider) launcherViewModelProvider()).put("com.elbehiry.delish.ui.map.MapViewModel", (Provider) mapViewModelProvider()).put("com.elbehiry.delish.ui.plan.MealPlanViewModel", (Provider) mealPlanViewModelProvider()).put("com.elbehiry.delish.ui.onboarding.OnBoardingViewModel", (Provider) onBoardingViewModelProvider()).put("com.elbehiry.delish.ui.recipedetails.RecipeDetailsViewModel", (Provider) recipeDetailsViewModelProvider()).put("com.elbehiry.delish.ui.recipes.RecipesViewModel", (Provider) recipesViewModelProvider()).put("com.elbehiry.delish.ui.search.SearchRecipesViewModel", (Provider) searchRecipesViewModelProvider()).build();
      }

      private static final class SwitchingProvider<T> implements Provider<T> {
        private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ViewModelCImpl viewModelCImpl;

        private final int id;

        SwitchingProvider(DaggerMainApplication_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ViewModelCImpl viewModelCImpl, int id) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.viewModelCImpl = viewModelCImpl;
          this.id = id;
        }

        @SuppressWarnings("unchecked")
        @Override
        public T get() {
          switch (id) {
            case 0: // com.elbehiry.delish.ui.bookmark.BookmarkViewModel 
            return (T) viewModelCImpl.bookmarkViewModel();

            case 1: // com.elbehiry.delish.ui.launcher.LauncherViewModel 
            return (T) viewModelCImpl.launcherViewModel();

            case 2: // com.elbehiry.delish.ui.map.MapViewModel 
            return (T) viewModelCImpl.mapViewModel();

            case 3: // com.elbehiry.delish.ui.plan.MealPlanViewModel 
            return (T) viewModelCImpl.mealPlanViewModel();

            case 4: // com.elbehiry.delish.ui.onboarding.OnBoardingViewModel 
            return (T) viewModelCImpl.onBoardingViewModel();

            case 5: // com.elbehiry.delish.ui.recipedetails.RecipeDetailsViewModel 
            return (T) viewModelCImpl.recipeDetailsViewModel();

            case 6: // com.elbehiry.delish.ui.recipes.RecipesViewModel 
            return (T) viewModelCImpl.recipesViewModel();

            case 7: // com.elbehiry.delish.ui.search.SearchRecipesViewModel 
            return (T) viewModelCImpl.searchRecipesViewModel();

            default: throw new AssertionError(id);
          }
        }
      }
    }
  }

  private static final class ServiceCBuilder implements MainApplication_HiltComponents.ServiceC.Builder {
    private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

    private Service service;

    private ServiceCBuilder(DaggerMainApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public MainApplication_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonC, service);
    }
  }

  private static final class ServiceCImpl extends MainApplication_HiltComponents.ServiceC {
    private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(DaggerMainApplication_HiltComponents_SingletonC singletonC,
        Service serviceParam) {
      this.singletonC = singletonC;


    }
  }
}
