// Generated by Dagger (https://dagger.dev).
package com.elbehiry.delish.ui.recipes;

import com.elbehiry.shared.domain.recipes.bookmark.DeleteRecipeSuspendUseCase;
import com.elbehiry.shared.domain.recipes.bookmark.IsRecipeSavedSuspendUseCase;
import com.elbehiry.shared.domain.recipes.bookmark.SaveRecipeSuspendUseCase;
import com.elbehiry.shared.domain.recipes.cuisines.GetAvailableCuisinesUseCase;
import com.elbehiry.shared.domain.recipes.ingredients.GetIngredientsUseCase;
import com.elbehiry.shared.domain.recipes.random.GetRandomRecipesUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RecipesViewModel_Factory implements Factory<RecipesViewModel> {
  private final Provider<GetRandomRecipesUseCase> getRandomRecipesUseCaseProvider;

  private final Provider<GetAvailableCuisinesUseCase> getAvailableCuisinesUseCaseProvider;

  private final Provider<SaveRecipeSuspendUseCase> saveRecipeUseCaseProvider;

  private final Provider<DeleteRecipeSuspendUseCase> deleteRecipeUseCaseProvider;

  private final Provider<IsRecipeSavedSuspendUseCase> isRecipeSavedUseCaseProvider;

  private final Provider<GetIngredientsUseCase> getIngredientsUseCaseProvider;

  public RecipesViewModel_Factory(Provider<GetRandomRecipesUseCase> getRandomRecipesUseCaseProvider,
      Provider<GetAvailableCuisinesUseCase> getAvailableCuisinesUseCaseProvider,
      Provider<SaveRecipeSuspendUseCase> saveRecipeUseCaseProvider,
      Provider<DeleteRecipeSuspendUseCase> deleteRecipeUseCaseProvider,
      Provider<IsRecipeSavedSuspendUseCase> isRecipeSavedUseCaseProvider,
      Provider<GetIngredientsUseCase> getIngredientsUseCaseProvider) {
    this.getRandomRecipesUseCaseProvider = getRandomRecipesUseCaseProvider;
    this.getAvailableCuisinesUseCaseProvider = getAvailableCuisinesUseCaseProvider;
    this.saveRecipeUseCaseProvider = saveRecipeUseCaseProvider;
    this.deleteRecipeUseCaseProvider = deleteRecipeUseCaseProvider;
    this.isRecipeSavedUseCaseProvider = isRecipeSavedUseCaseProvider;
    this.getIngredientsUseCaseProvider = getIngredientsUseCaseProvider;
  }

  @Override
  public RecipesViewModel get() {
    return newInstance(getRandomRecipesUseCaseProvider.get(), getAvailableCuisinesUseCaseProvider.get(), saveRecipeUseCaseProvider.get(), deleteRecipeUseCaseProvider.get(), isRecipeSavedUseCaseProvider.get(), getIngredientsUseCaseProvider.get());
  }

  public static RecipesViewModel_Factory create(
      Provider<GetRandomRecipesUseCase> getRandomRecipesUseCaseProvider,
      Provider<GetAvailableCuisinesUseCase> getAvailableCuisinesUseCaseProvider,
      Provider<SaveRecipeSuspendUseCase> saveRecipeUseCaseProvider,
      Provider<DeleteRecipeSuspendUseCase> deleteRecipeUseCaseProvider,
      Provider<IsRecipeSavedSuspendUseCase> isRecipeSavedUseCaseProvider,
      Provider<GetIngredientsUseCase> getIngredientsUseCaseProvider) {
    return new RecipesViewModel_Factory(getRandomRecipesUseCaseProvider, getAvailableCuisinesUseCaseProvider, saveRecipeUseCaseProvider, deleteRecipeUseCaseProvider, isRecipeSavedUseCaseProvider, getIngredientsUseCaseProvider);
  }

  public static RecipesViewModel newInstance(GetRandomRecipesUseCase getRandomRecipesUseCase,
      GetAvailableCuisinesUseCase getAvailableCuisinesUseCase,
      SaveRecipeSuspendUseCase saveRecipeUseCase, DeleteRecipeSuspendUseCase deleteRecipeUseCase,
      IsRecipeSavedSuspendUseCase isRecipeSavedUseCase,
      GetIngredientsUseCase getIngredientsUseCase) {
    return new RecipesViewModel(getRandomRecipesUseCase, getAvailableCuisinesUseCase, saveRecipeUseCase, deleteRecipeUseCase, isRecipeSavedUseCase, getIngredientsUseCase);
  }
}
