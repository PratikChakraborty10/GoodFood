// Generated by Dagger (https://dagger.dev).
package com.elbehiry.delish.ui.bookmark;

import com.elbehiry.shared.domain.recipes.bookmark.DeleteRecipeSuspendUseCase;
import com.elbehiry.shared.domain.recipes.bookmark.GetSavedRecipesUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class BookmarkViewModel_Factory implements Factory<BookmarkViewModel> {
  private final Provider<GetSavedRecipesUseCase> getSavedRecipesUseCaseProvider;

  private final Provider<DeleteRecipeSuspendUseCase> deleteRecipeUseCaseProvider;

  public BookmarkViewModel_Factory(Provider<GetSavedRecipesUseCase> getSavedRecipesUseCaseProvider,
      Provider<DeleteRecipeSuspendUseCase> deleteRecipeUseCaseProvider) {
    this.getSavedRecipesUseCaseProvider = getSavedRecipesUseCaseProvider;
    this.deleteRecipeUseCaseProvider = deleteRecipeUseCaseProvider;
  }

  @Override
  public BookmarkViewModel get() {
    return newInstance(getSavedRecipesUseCaseProvider.get(), deleteRecipeUseCaseProvider.get());
  }

  public static BookmarkViewModel_Factory create(
      Provider<GetSavedRecipesUseCase> getSavedRecipesUseCaseProvider,
      Provider<DeleteRecipeSuspendUseCase> deleteRecipeUseCaseProvider) {
    return new BookmarkViewModel_Factory(getSavedRecipesUseCaseProvider, deleteRecipeUseCaseProvider);
  }

  public static BookmarkViewModel newInstance(GetSavedRecipesUseCase getSavedRecipesUseCase,
      DeleteRecipeSuspendUseCase deleteRecipeUseCase) {
    return new BookmarkViewModel(getSavedRecipesUseCase, deleteRecipeUseCase);
  }
}
